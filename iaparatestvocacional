import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import LabelEncoder

# Preguntas para el cuestionario vocacional
preguntas = [
 "¿Te gustan las matemáticas?",
 "¿Disfrutas resolviendo problemas de programación?",
 "¿Eres bueno/a en ciencias?",
 "¿Te interesan las artes visuales?",
 "¿Disfrutas trabajando con personas?",
 "¿Prefieres trabajar en equipo o individualmente?",
 "¿Te sientes atraído por la idea de analizar datos y tomar decisiones importantes para una organización?",
  "¿Disfrutas de la creatividad y la planificación para diseñar proyectos o resolver problemas?",
  "¿Eres bueno en el manejo de números y la interpretación de datos financieros?",
  "¿Sientes curiosidad por comprender cómo funcionan los procesos biológicos a nivel molecular?",
  "¿Te interesa la aplicación de la tecnología para mejorar la vida de las personas?",
  "¿Eres bueno en la resolución de problemas técnicos y mecánicos?",
  "¿Te atrae la idea de trabajar con circuitos electrónicos y sistemas de comunicación?",
  "¿Eres un amante de la tecnología y disfrutas programando o trabajando en desarrollo de software?",
  "¿Te interesa el manejo de sistemas de información y la seguridad informática?",
  "¿Eres bueno en la optimización de procesos y la mejora de la eficiencia?",
  "¿Disfrutas del trabajo en laboratorios y la investigación científica?",
  "¿Te preocupa la sostenibilidad y el impacto ambiental de las actividades humanas?",
  "¿Tienes habilidades para el diseño y la planificación de proyectos a gran escala?",
  "¿Eres bueno en la gestión de recursos y presupuestos?",
  "¿Te atrae la idea de diseñar y supervisar la construcción de estructuras físicas?",
  "¿Eres bueno en el análisis de materiales y estructuras?",
  "¿Tienes interés en el diseño y operación de procesos químicos?",
  "¿Disfrutas de la programación y el diseño de sistemas de software?",
  "¿Te sientes cómodo trabajando en equipo y liderando proyectos?",
  "¿Eres bueno en el análisis de costos y presupuestos?",
  "¿Te preocupa la ética y la integridad en el trabajo?",
  "¿Eres hábil en la gestión de proyectos y equipos?",
  "¿Te interesa el diseño y la planificación de espacios y edificios?",
  "¿Disfrutas de la investigación y el desarrollo en ciencias biológicas?",
  "¿Eres bueno en el diseño y optimización de procesos químicos y biológicos?",
  "¿Te preocupas por la seguridad y la regulación en la industria química y biotecnológica?",
  "¿Eres hábil en la integración de sistemas eléctricos y mecánicos?",
  "¿Te sientes atraído por la electrónica y el diseño de circuitos?",
  "¿Eres bueno en la resolución de problemas algorítmicos y el desarrollo de software?",
  "¿Tienes interés en la gestión empresarial y la toma de decisiones basadas en datos?",
  "¿Te atrae la idea de trabajar en la gestión de recursos humanos y financieros de una empresa?",
  "¿Eres bueno en la planificación estratégica y el desarrollo organizacional?",
  "¿Disfrutas analizando el mercado y desarrollando estrategias de marketing?",
  "¿Sientes una inclinación natural hacia el liderazgo y la gestión de equipos?",
  "¿Te ves resolviendo problemas empresariales de manera efectiva en el futuro?",
  "¿Tienes interés en conocer la legislación comercial y laboral?",
  "¿Valoras la importancia de la comunicación efectiva en la gestión empresarial?",
  "¿Te ves aplicando principios éticos en tu carrera profesional?",
  "¿Tienes habilidades para diseñar espacios y edificios de manera creativa?",
  "¿Eres hábil en el uso de software de modelado arquitectónico?",
  "¿Te interesa aprender sobre diversos estilos arquitectónicos?",
  "¿Valoras la sostenibilidad en la planificación urbana?",
  "¿Sientes curiosidad por los materiales de construcción y las tecnologías modernas?",
  "¿Te ves trabajando en el cumplimiento de regulaciones y normativas de construcción?",
  "¿Eres capaz de combinar estética y funcionalidad en tus diseños?",
  "¿Tienes un fuerte sentido de responsabilidad en la supervisión de proyectos?",
  "¿Te atrae la idea de evaluar el impacto ambiental de tus proyectos?",
  "¿Eres bueno en la gestión de recursos y presupuestos de construcción?",
  "¿Disfrutas de la ingeniería electromecánica y la integración de sistemas?",
  "¿Sientes una pasión por el diseño y mantenimiento de equipos industriales?"
    # Agrega más preguntas aquí...
]

# Respuestas sugeridas por el usuario y las carreras correspondientes
respuestas_usuario = []
carreras_correspondientes = []

# Supongamos que estas son algunas carreras relacionadas con las preguntas
carreras = [
   "ingenieria-en-sistemas-computacionales",
   "licenciatura-en-administracion-de-empresas",
   "Administración",
   "Arquitectura",
   "Contador Público",
   "Ingeniería Bioquímica",
   "Ingeniería Civil",
   "Ingeniería Electromecánica",
   "Ingeniería Electrónica",
   "Ingeniería en Gestión Empresarial",
   "Ingeniería en Logística",
   "Ingeniería en Nanotecnología",
   "Ingeniería en Sistemas Computacionales",
   "Ingeniería en Tecnologías de la Información y Comunicación",
   "Ingeniería Industrial",
   "Ingeniería Química"
    # Agrega más carreras aquí...
]

# Número de repeticiones deseadas
repeticiones = int(input("Ingrese la cantidad de veces que desea obtener una respuesta aleatoria: "))

for _ in range(repeticiones):
    for pregunta in preguntas:
        # Función para obtener una respuesta aleatoria
        def obtener_respuesta_aleatoria():
            respuestas_aleatorias = ["Sí", "No", "Tal vez", "Probablemente", "Depende", "¡Claro!"]
            return random.choice(respuestas_aleatorias)

        respuesta = obtener_respuesta_aleatoria()
        respuestas_usuario.append(respuesta)

        # Simulamos una asignación aleatoria de carreras basadas en las respuestas
        if "si" in respuesta:
            carreras_correspondientes.append(carreras[0])
        else:
            carreras_correspondientes.append(carreras[1])

    # Crear un modelo de clasificación (clasificador Naive Bayes en este caso)
    encoder = LabelEncoder()
    y = encoder.fit_transform(carreras_correspondientes)
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(respuestas_usuario)
    classifier = MultinomialNB()
    classifier.fit(X, y)

    # Realizar una nueva predicción basada en las respuestas del usuario
    nuevas_respuestas = ["Si", "Si", "No", "Quiza", "Si", "Trabajo en equipo"]
    nuevas_respuestas_vectorizados = vectorizer.transform(nuevas_respuestas)
    prediccion_carrera = encoder.inverse_transform(classifier.predict(nuevas_respuestas_vectorizados))

    # Mostrar la carrera recomendada para cada iteración
    print("\nCarrera recomendada:")
    print(prediccion_carrera[0])
    print("\n---\n")

